====== Pango - programátorská dokumentace ======

===== Architektura =====

Program Pango se skládá ze dvou hlavních částí, a to knihovny a grafického rozhraní. Knihovna poskytuje kompletní objektovou reprezentaci hry. Její služby využívá grafické rozhraní (Windows Forms aplikace), která zajišťuje zpracování podnětů od uživatele a zobrazení aktuálního stavu hry. Herní smyčka probíhá až v grafickém rozhraní. Knihovna i GUI leží v namespace Pango.

==== Knihovna libpango ====

=== Přehled ===

Označení:
  * hra - skládá se z levelů; končí, když hráč umře a již nemá volné životy
  * level - má svou mapu; končí, když hráč zabije všechna monstra

Hra je reprezentována třídou Game, jednotlivé levely stavy této třídy. Během jednoho běhu programu může proběhnout více her. Game obsahuje mapu (instance třídy Map), simulační kalendář (singleton instance třídy Schedule), stav získaných peněz a několik eventů.

Základem levelu je mapa, ve které se vyskytují různé předměty nebo postavy, souhrnně entity, které tvoří celou hieararchii tříd. Mapa využívá objektů pomocných tříd Coordinates a Place. Pro načítání mapy ze souboru a pro konverzi mezi Map a string slouží třída MapPersistence, která okrajové využívá knihovnu Reader projektu CodEx.

Kalendář Schedule sleduje herní čas a především poskytuje možnost entitám a jiným objektů naplánovat nějakou akci na daný herní čas.

Třída Config slouží k oddělení nastavení (většinou různých číselných parametrů) od samotného kódu. Nastavení tak může ležet i mimo program a změny mohou být persistentně uloženy.

=== Game ===

Třída Game reprezentuje hru a její levely. Je použit návrhový vzor Singleton, jediná instance stačí a je jednoduše přístupná.

Stavy hry: Intro, Prepared, Running, Paused, Finishing, Finished. Game obsahuje mapu, rozvrh (simulační kalendář), level, stav peněžního skóre a odkaz na entitu hráče (zatím pouze single-player). Game nabízí několik eventů, na které se mohou navěsit funkce z grafického rozhraní.

Použití:
  * do Config.Instance["Game.map"] se vloží mapa jako text
  * použije se instance Game.Instance
  * pomocí Game.Instance.loadMap() se vytvoří mapa z configu
  * na eventy se zavěsí vlastní funkce
  * kroky smyčky se volají přes step()
  
Rohzraní:
  * static Game Instance - přístup k singleton instanci
  * Map Map
  * Schedule Schedule
  * States State
  * int Time
  * int Money
  * int Level
  * PlayerEntity Player
  * void loadMap() - načte mapu z Config a nastaví odkaz na hráče
  * void start() - spustí hru, event onStart
  * void endLevel() - konec levelu; přechod dál, nebo konec hry, event onEnd
  * void endGame() - konec hry, event onEnd
  * void pause() - pozastavení nebo opětovné spuštění hry, event OnPause
  * bool step()
    - krok herní smyčky, event onLoopStep
    - vrací true, když aspoň jedna entita něco provede
    - asi nejdůležitější část třídy Game
  * void receiveMoney(int) - přidá hráči danou částku peněz
  * eventy:
    * onLoopStep
    * onStart
    * onPause
    * onEnd
    * onLoadMap
    
Pomocné věci:
  * void addRandomBonuses() - na náhodné průchozí políčko přidá náhodný bonus
  * void newGame()
  * void nextLevel()

=== Map a její pomocné třídy ===

== Map ==

Mapa jednoho levelu. Obsahuje políčka s entitami. Rovněž si pamatuje počet průchozích políček a seznamy monster a bonusů, pro rychlejší procházení.

Rozhraní:
  * Map(int width, int height) - vytvoří prázdnou mapu dané velikosti
  * Map(Entity[,]) - vytvoří mapu z pole entit (např. načteného ze souboru)
  * Place[,] Places
  * int Height
  * int Width
  * List<MonsterEntity> Monsters - seznam monster
  * List<BonusEntity> Bonuses - seznam bonusových entit
  * bool add(Entity, Coordinates) - přidá entitu na dané souřadnice
  * bool add(Entity, Place) - přidá entitu na dané políčko
  * bool remove(Entity, Coordinates) - odstraní entitu z daného políčka
  * bool remove(Entity) - odstraní entitu z mapy
  * bool isWalkable(Coordinates) - true, je-li pole průchozí
  * bool isSmitable(Coordinates) - true, pokud lze pole prosvištět ledem
  * bool move(Entity, Coordinates from, Coordinates to) - přesune entitu
  * Coordinates find(Entity) - najde danou entitu v mapě, nebo vrátí neplatné souřadnice
  * bool hasEntity(Entity) - true, pokud se daná entita vyskytuje někde v mapě
  * bool hasEntity(Entity, Coordinates) true, pokud se daná entita vyskytuje na daném políčku
  * IEnumerator<Entity> GetEnumerator() - iterátor entitami v mapě
  * Place getPlace(Coordinates) - vrátí políčko na daných souřadnicích
  * List<Entity> getNeighbors(Coordinates) - vrátí seznam sousedních entit
  * bool areValidCoordinates(Coordinates) - true, leží-li souřadnice na mapě
  * Coordinates getRandomWalkablePlace() - vrátí náhodné souřadnice na mapě
  * string ToString() - převod na textovou reprezentaci

== MapPersistence ==

Slouží pro převod mezi Map a string, tj. načítání mapy ze souboru a textové zobrazení mapy. Obsahuje vlastní převodní tabulky.

Rozhraní:
  * static Map FromString(string) - převod textu na mapu
  * static string ToString(Map) - převod mapy na text
  * static string readMapFromFile(string) - čtení mapy ze souboru

== Coordinates ==

Objekty této třídy reprezentují dvourozměrné souřadnice v mapě, případně neplatné souřadnice. Pomocí nich se adresují políčka mapy a každá entita si pomocí nich navíc udržuje svoji pozici.

Souřadnice se počítají od nuly, x je vertikální složka (směrem shora dolů), y horizontální (směrem zleva doprava).

Coordinates nabízí i jednoduchou aritmetiku mezi souřadnicemi a směry.
Rozhraní:
  * int x, y - složky souřadnic
  * bool inInvalid - příznak neplatné souřadnice
  * static Coordinates invalid - neplatné souřadnice
  * Coordinates(int, int)
  * static Coordinates operator +(Coordinates, Coordinates)
  * static Coordinates operator -(Coordinates, Coordinates)
  * static Nullable<Direction> diffDirection(Coordinates, Coordinates)
    - směr jako rozdíl dvou sousedních souřadnic, jinak null
  * bool Equals(Coordinates)
  * static bool areNeighbors(Coordinates, Coordinates)
  * bool isNeighbor(Coordinates)
  * static Coordinates step(Coordinates, Direction)
  * Coordinates step(Direction dir)

== Place ==

Reprezentuje jedno políčko na mapě. Zajímavé je, že může obsahovat až dvě entity - jednu průchozí (walkable - potomka třídy WalkableEntity) a jednu neprůchozí. To se např. hodí, jakmile mostrum (non-walkable) chce projít přes bonus (walkable), ale nebude jej sbírat. Zřejmě stačí nejvýš jedna entita každého druhu, jinak by nastal na mapě zmatek a hra by se stala dosti neintuitivní.

Rozhraní:
  * Walkable, NonWalable - properties pro přístup k entitám
  * bool add(Entity) - přidá entitu (a správně zařadí podle druhu)
  * bool remove(Entity) - vymaže zadanou entitu, pokud byla na políčku
  * bool isWalkable()
  * bool contains(Entity)
  * IEnumerator<Entity> GetEnumerator() - iterátor přes entity na políčku

== enum Direction ==

Reprezentuje směr. Lze převést na int a zpět.
Up = 0, Right, Down, Left.

== enum Rotation ==

Reprezentuje úhel rotace. Lze převést na int a zpět.
Forward = 0, CW, Backwards, CCW.

== DirectionUtils ==

Umožňuje provádět rotaci směru a převod směru na souřadnice. Direction i Rotation jsou výčtového typu, protože je nenáročné je převádět na číslo a zpět. Jejich hodnot je jen konstatně mnoho (resp. málo) tudíž není nutné pro ně neustále vytvářet a rušit stejné objekty.

Rozhraní:
  * static int Count - počet směrů (pro průchod směry)
  * static Direction rotate(Direction, Rotation) - otočí daný směr o danou rotaci
  * static Coordinates step(Direction)
    - př. směr Up převede na Coordinates (-1,0)

=== Entity a jejich hierarchie ===

Entity reprezentují věci nebo postavy, které se vyskytují na mapě.

Hierarchie:
* abstract Entity
  * abstract MovableEntity
    * abstract LiveEntity
      * PlayerEntity
      * MonsterEntity
    * abstract MovableBlock
      * DiamondBlock
      * IceBlock
  * abstract WalkableEntity
    * abstract BonusEntity
      * MoneyBonus
      *  HealthBonus
      * LiveBonus
  * StoneBlock

Použity abstraktní třídy místo rozhraní, kvůli přidávání dalších fields.

== Entity ==

Základ pro všechny entity.

Rozhraní:
  * Coordinates Coords - udržování pozice uvnitř entity se občas hodí
  * bool turnDone - používá se, aby v jednom kroku entita nehrála vícekrát
  * abstract bool turn() - akce, když entita dostane "tah" (v každém kroku)
  * abstract void acceptAttack(Entity sender, int hitcount)
    - volá útočník na entitu, když jí napadne
  * void vanish() - entita se vymaže z mapy

== MovableEntity ==

Entity, které se mohou pohybovat.

Rozhraní:
  * Direction Direction - aktuální směr pohybu
  * bool go()
    - provedení jednoho kroku v aktuálním směru
    - vrátí true, když se krok podařilo provést
  * virtual bool canGo(Coordinates) - true, pokud lze jít v aktuálním směru
  * void rotate(Rotation) - otočení o daný úhel

== LiveEntity ==

Živé entity mající zdraví, životy, mohou být zraněny, zabity a znovu ožít.

Rozhraní:
  * int Health
  * int MaxHealth
  * int Lives
  * abstract void die() - na smrt mohou konkrétní entity reagovat různě
  * virtual bool changeHealth(int change) - změna zdraví má vliv jak na zdraví, tak i na počet volných životů
  * void respawn(LiveEntity newborn) - na náhodné místo umístí novou entitu

== WalkableEntity ==

Průchozí entita. Jiné entity mohou vstoupit na stejné políčko jako tato. Hodí se například, když monstrum vstoupí na bonus, ale nechceme aby jej sebral.

Tato třída nijak nemění rozhraní, užívá se pouze pomocí klíčového slova 'is'.

== MovableBlock ==

Neprůchozí entita, která se za určitých podmínek může pohybovat. Hodí se pro bloky ledové bloky a diamanty, do nichž může hráč kopat.

Má dva stavy: Normal a Movement.

Implementuje:
  * bool turn() - při pohybu zabije živé entity po cestě a zastaví se až o neživou entitu
  * bool canGo(Coordinates) - pokračovat lze, splňuje-li políčko isSmitable()
  * void acceptAttack(Entity sender, int hitcount)

Rozhraní:
  * protected abstract void acceptAttackCantGoHook()
  * protected abstract void turnCantGoHook()

== PlayerEntity ==

Hráč. Zatím je hra Pango navržena pouze pro single-player.

Implementuje:
  * bool turn() - zpracuje požadavky uživatele a provádí interakci s ostatními entitami na políčku
  * void acceptAttack(Entity sender, int hitcount)
  * void die() - respawnuje hráče nebo ukončí celou hru

Rozhraní:
  * public PlayerEntity()
  * layerEntity(PlayerEntity) - copy constructor se hodí při respawnu nebo přechodu do nového levelu
  * void requestMovement(Direction) - volá obsluha klávesových stisků
  * void requestAttack()

== MonsterEntity ==

Monstra, protivníci hráče. Stavy: Normal, Stunned, Egg (Monstrum se líhne z vejce a lze jej omráčit). Pro chůzi je nyní použit algoritmus ze cvičení Programování II s přidanou náhodnou rotací.

Implementuje:
  * bool turn() - zde monstrum chodí po bludišti a zkouší zaútočit na hráče
  * void acceptAttack(Entity sender, int hitcount)
  * void die()

Rozhraní:
  * MonsterEntity() - naplánuje vylíhnutí
  * void stun(int time) - mostrum se na chvíli omráčí

== DiamondBlock ==

Diamant. Chová se jako ledový blok, ale netaje. Několik diamantů poskládaných do řady dá bonus a omráčí všechna monstra.

Implementuje:
  * void acceptAttackCantGoHook() - nic nedělá
  * void turnCantGoHook() - kontroluje poskládání do řady

== IceBlock ==

Ledový blok. Hráč do něj může kopnout a tím jej uvést do pohybu. Nemá-li kam jít, roztaje.

Implementuje:
  * void acceptAttackCantGoHook() - tání
  * void turnCantGoHook() - nic nedělá

== BonusEntity ==

Základ pro všechny bonusové entity. Má omezenou životnost (int timeToLive).

Rozhraní:
  * abstract void giveBonus(PlayerEntity) - hráč si vyzvedne bonus, když na něj narazí

== MoneyBonus, HealthBonus, LiveBonus ==

Bonusy ve formě peněz, zdraví resp. volných životů. Různě implementují giveBonus().

=== Schedule ===

Udržuje herní čas (počítaný v krocích) a slouží pro plánování akcí, které se mají provést po určitém počtu herních kroků. Obsahuje prioritní frontu, kde prioritou je právě herní krok. Akce, většinou definované jako anonymní funkce, se ukládají jako C# delegate (obdoba ukazatele na funkci).

Důležité prvky rozhraní:
  *  void add(EventDelegate eh, int timeoffset) - naplánuje akci
  *  void callCurrentEvents() - provede akce pro aktuální čas
  *  int Time - aktuální čas

=== Config ===

Slouží pro správu nastavení. Obsahuje slovník párů <string,string> pro snadné adresování. Třída používá návrhový vzor Singleton a je tak snadno přístupná.

==== Grafické rozhraní ====

=== Přehled ===

Jde o Windows Forms aplikaci. Má tři úkoly:
  * pomocí knihovny inicializovat hru a spouštět herní smyčku
  * zpracovávat stisky kláves
  * zobrazovat mapu a údaje o hře
  
Herní smyčka využívá časovače z Forms. Na eventy v Game připojuje svoje metody pro vykreslování a manipulaci s časovačem.

GUI obsahuje dvě třídy Program a PangoGameForm.

=== Program ===

=== PangoGameForm ===

Form s hlavním oknem aplikace. Z komponent obsahuje PictureBox, do nějž se kreslí mapa, ImageList pro uložení obrázků entit, StatusStrip pro zobrazení informací o stavu hry. Dále obsahuje obsluhy událostí pro vykreslovaní mapy a zpracování klávesového vstupu.

Rozhraní:
  * void refreshStatusLabels(object sender, EventArgs e)
  * void repaintMapPictureBox(object sender, EventArgs e)
  * void refresh() - obnoví mapu i status strip, lze volat přímo
  * void setWindowSize(object sender, EventArgs e)
    - nastaví velikost okna podle velikosti mapy

Další věci:
  * private void processKeyboardInput(object sender, KeyEventArgs e)
  * private void mapPictureBox_Paint(object sender, PaintEventArgs e)
    - pro entity v políčkách vybere z ImageListu vhodný obrázek podle jejich stringové reprezentace (s pomocí funkce ToString())

=== Program ===

V této statické třídě se inicializuje a spustí hra. Třída obsahuje Timer (z Windows Forms), několik obsluh událostí. Zde je propojena třída Game s PangoGameForm.

Rozhraní:
  * static void Main()

Další věci:
  * static Windows.Forms.Timer timer - časovač z Windows Forms, který bere ohled na vlákna v GUI aplikaci. Lze použít jednodušeji než obyčejný časovač.
  * static void initializeGame(PangoGameForm)
    - inicializuje hru
    - namapuje obsluhy eventů v Game
  * static void stop() - zastaví časovač, lze volat přímo
  * static void gameStart(object sender, EventArgs e)
    - v časovači naplánuje gameStep
  * static void gamePause(object sender, EventArgs e)
    - zastaví časovač, obsluha eventu
  * static void gameStep(object sender, EventArgs e)
    - provede krok hry a znovu se naplánuje
